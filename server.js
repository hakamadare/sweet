// Initialization ======================================================================
const express = require('express'); //only used here
const handlebars = require('express-handlebars'); //only used here
const app = express();
const port = process.env.PORT || 8686;
const passport = require('passport'); //only used here
const flash = require('connect-flash'); //only used here
require('handlebars-helpers')(); //only used here

const compression = require('compression'); //only used here
app.use(compression());

const expressValidator = require('express-validator'); //obvs only here
app.use(expressValidator());

const morgan = require('morgan');
const cookieParser = require('cookie-parser');
const bodyParser = require('body-parser');
const session = require('express-session');

const fileUpload = require('express-fileupload');
app.use(fileUpload());

globals = require('./config/globals');

// Set up our Express application
app.use(morgan('dev')); // log every request to the console
app.use(cookieParser()); // read cookies (needed for auth)
app.use(bodyParser()); // get information from html forms

// View engine (Handlebars)
hbs = handlebars.create({
  defaultLayout: 'main',
  partialsDir:['views/partials/','views/partials/scriptPartials/'],
  helpers: {
    plural: function (number, text) {
      var singular = number === 1;
      // If no text parameter was given, just return a conditional s.
      if (typeof text !== 'string') return singular ? '' : 's';
      // Split with regex into group1/group2 or group1(group3)
      var match = text.match(/^([^()\/]+)(?:\/(.+))?(?:\((\w+)\))?/);
      // If no match, just append a conditional s.
      if (!match) return text + (singular ? '' : 's');
      // We have a good match, so fire away
      return singular && match[1] // Singular case
        ||
        match[2] // Plural case: 'bagel/bagels' --> bagels
        ||
        match[1] + (match[3] || 's'); // Plural case: 'bagel(s)' or 'bagel' --> bagels
    },
    buildComment(comment, depth) {
      if (!depth) depth = 1;
      var tree = [];
      tree.push({
        comment: comment,
        depth: depth
      })
      comment.replies.forEach((r) => {
        depth = depth + 1
        tree.comment.replies.depth = depth;
      });
      return tree;
    }
  }
});
app.engine('handlebars', hbs.engine);
app.set('view engine', 'handlebars');

// Static files
app.use(express.static('public'));

// Database Configuration and Global Variable Creation===============================================================
const configDatabase = require('./config/database.js');
mongoose = require('mongoose');
mongoose.connect(configDatabase.url, {useNewUrlParser: true}); // connect to our database
ObjectId = mongoose.Types.ObjectId;
DBReference = mongoose.Schema.Types.ObjectId;
User = require('./app/models/user');
Relationship = require('./app/models/relationship');
Post = require('./app/models/post');
Tag = require('./app/models/tag');
Community = require('./app/models/community');
Vote = require('./app/models/vote');
Image = require('./app/models/image');

//persist sessions across restarts via their storage in mongodb
const MongoStore = require('connect-mongo')(session);

//set up passport authentication and session storage
require('./config/passport')(passport); // pass passport for configuration
var auth = require('./config/auth.js');
app.use(session({
  secret: auth.secret,
  cookie: {
    maxAge: (48 * 60 * 60 * 1000)
  }, // 48 hours
  rolling: true,
  resave: true,
  saveUninitialized: false,
  store: new MongoStore({
    mongooseConnection: mongoose.connection,
    secret: auth.secret
  })
}));
app.use(passport.initialize());
app.use(passport.session()); // persistent login sessions
app.use(flash()); // use connect-flash for flash messages stored in session
app.use(function (req, res, next) {
  res.locals.sessionFlash = req.session.sessionFlash;
  delete req.session.sessionFlash;
  next();
});

//set up webpush to send push notifications for the notifier
webpush = require('web-push');
if (!auth.vapidPrivateKey || !auth.vapidPublicKey) {
  vapidKeys = webpush.generateVAPIDKeys();
  webpush.setVapidDetails(
    'mailto:support@sweet.sh',
    vapidKeys.publicKey,
    vapidKeys.privateKey
  );
} else {
  webpush.setVapidDetails(
    'mailto:support@sweet.sh',
    auth.vapidPublicKey,
    auth.vapidPrivateKey
  );
}

//kill the process when the sigint code is recieved, generally generated by pressing ctrl-c in the console
app.on('SIGINT', function () {
  db.stop(function (err) {
    process.exit(err ? 1 : 0);
  });
});

// utillized by routes code =================================================================================
path = require('path');
global.appRoot = path.resolve(__dirname);
fs = require('fs');
moment = require('moment');
moment.updateLocale('en', {
  relativeTime: {
      future: "in %s",
      past: "%s ago",
      s: 'just like a second ago',
      ss: '%ds',
      m: "1m",
      mm: "%dm",
      h: "1h",
      hh: "%dh",
      d: "1d",
      dd: "%dd",
      M: "1mon",
      MM: "%dmon",
      y: "1y",
      yy: "%dy"
  }
});
sanitize = require('mongo-sanitize');
sanitizeHtml = require('sanitize-html');
sharp = require('sharp');
shortid = require('shortid');
bcrypt = require('bcrypt-nodejs');
Autolinker = require('autolinker');
schedule = require('node-schedule');

// routes ======================================================================
helper = require('./app/utilityFunctionsMostlyText.js');
require('./app/statisticsTracker.js')(app, mongoose);
notifier = require('./app/notifier.js');
emailer = require('./app/emailer.js');
require('./app/personalAccountActions.js')(app, passport);
require('./app/inhabitingCommunities.js')(app, passport);
require('./app/viewingSweet.js')(app);
require('./app/postingToSweet.js')(app);

// launch ======================================================================
app.listen(port);

/*var https = require('https');
var httpsOptions = {
    key: fs.readFileSync('../192.168.1.15-key.pem'),
    cert: fs.readFileSync('../192.168.1.15.pem')
};
https.createServer(httpsOptions, app)
.listen(3000, function () {
  console.log('app listening on port 3000! Go to https://localhost:3000/')
})*/

console.log('The magic happens on port ' + port);