<script type="text/javascript">
{{#if loggedInUserData.settings.flashRecentComments}}
    $(window).scroll(function() {
        $(".recent-comment-content:not(.flash)").each(function(){
            var element = $(this)
            var top_of_element = $(this).offset().top;
            var bottom_of_element = $(this).offset().top + $(this).outerHeight();
            var bottom_of_screen = $(window).scrollTop() + window.innerHeight;
            var top_of_screen = $(window).scrollTop();

            if((bottom_of_screen > top_of_element) && (top_of_screen < bottom_of_element)){
                element.addClass('flash')
                // setTimeout(function(){
                //     element.removeClass('flash')
                // }, 2000);
            }
        });
    });
{{/if}}

$(function() {
  $('body').tooltip({
    selector: '[data-toggle="tooltip"]'
  });
  $("#notificationsContainer").load( "/api/notification/display" );

  $('#notificationsDropdownLink, #notificationsPageLink').hover(function(){
    $(this).find('.badge').css('background-color', '#ce1717');
  }, function() {
    $(this).find('.badge').css('background-color', '#6c757d');
  });
  if ($('#notificationsPageLink').hasClass('active')){
    $('#notificationsPageLink').find('.badge').css('background-color', '#900202');
  }

  $('.clear-all-notifications').click(function() {
      $.post('/api/notifications/clearall', function(data){
          $("#notificationsContainer").load( "/api/notification/display" );
      })
  })

  $("#darkModeToggle").click(function(e){
    e.preventDefault();
    if ($(this).hasClass('notification-active')){
      $("#darkModeStylesheet").attr("href","")
      $(this).removeClass('notification-active')
    }
    else {
      $("#darkModeStylesheet").attr("href","/css/darkmode.css")
      $(this).addClass('notification-active')
    }
  })

  // Navbar search box

  $('#navbarSearchField').keypress(function(event){
  	var keycode = (event.keyCode ? event.keyCode : event.which);
    var searchQuery = $(this).val();
  	if(keycode == '13'){
  		window.location.href = '/search/' +	searchQuery
  	}
  });
  $("#navbarSearchButton").click(function(event){
    event.preventDefault();
    var searchQuery = $('#navbarSearchField').val();
    window.location.href = '/search/' +	searchQuery
  });


  // window.onbeforeunload = function() {
  //     return true;
  // };

  // Reload notifications container and check for new posts every minute (hack until we set up WebSockets)
  window.setInterval(function(){
    $("#notificationsContainer").load("/api/notification/display");
    {{#eq activePage "home"}}
    $("#checkNewPosts").load("/showposts/home/{{loggedInUserData._id}}/1", function(error, result){
      let latestPost = $("#checkNewPosts").find(".post").attr("data-post-id");
      let currentlyDisplayedPost = $("#postsContainer").find(".post").attr("data-post-id");
      if ((latestPost != currentlyDisplayedPost) && latestPost != ""){
        $("#newPostsAvailable").show();
      }
      else {
        $("#newPostsAvailable").hide();
      }
    })
    {{/eq}}
  }, 60000);

  $('body').on('click', '.show-comments', function() {
    commentsContainer = $(this).closest(".post").find(".comments");
    commentsContainer.slideToggle("fast", function(){
      if (commentsContainer.is(':visible')){
        if(commentsContainer.height() > $(window).height()){
          scrollTarget = $(this).closest('.comments').find('.recent-comment-content')
          if (scrollTarget[0]) {
              var scroll = scrollTarget.offset().top+scrollTarget.height()-$(window).height()+200;
          }
          else {
              var scroll = commentsContainer.offset().top+commentsContainer.height()-$(window).height();
          }
          $("html, body").animate({ scrollTop: scroll+"px" },200);
        }
        var post = $(this).closest('.post');
        $.post("/api/notification/update-by-subject/"+post.attr("data-post-id"), function(data){
          $("#notificationsContainer").load( "/api/notification/display" );
        })
      }
    })

  })
  $('body').on('click', '.show-more', function() {
    var state = $(this).attr("data-state");
    if (state == "contracted") {
      var h = $(this).prev(".abbreviated-content").css('height','100%').height();
      $(this).prev(".abbreviated-content").css('height','7rem');
      $(this).prev(".abbreviated-content").removeClass("abbreviated-content").addClass("post-content").animate({height:h},200);
      $(this).attr("data-state","expanded");
    }
    else {
      var pC = $(this).prev(".post-content");
      pC.addClass("abbreviated-content").removeClass("post-content").animate({height:"7rem"},200);
      var scroll = pC.offset().top;
      $("html, body").animate({ scrollTop: (scroll-200)+"px" },200); //-200 to roughly account for the navbar covering up the very top of the screen
      $(this).attr("data-state","contracted");
    }
    var text = $(this).text();
    $(this).text(
        text == "Show more" ? "Show less" : "Show more");
  })
  $('body').on('click','.replyEmojiWindowButton', function() {
    $(this).closest('.new-comment-form').find('.replyEmojiWindow').slideToggle("fast");
  })
  $('body').on('click','.replyEmojiWindow>.add-emoji', function() {
    pasteHtmlAtCaret($(this).closest(".new-comment-form").find('.editable-comment-content.medium-editor-element'), '<span class="emoji"> ' + event.target.innerHTML + '</span>');
  })

    $('#boostersModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget)
        var users = button.data('users')
        var modal = $(this)
        modal.find('#boosters-list').empty()
        if (users.followedBoosters.includes("you")){
            modal.find('#boosters-list').append('<a href="/{{loggedInUserData.username}}" class="list-group-item">You (@{{loggedInUserData.username}})</li>');
        }
        users.followedBoosters.forEach(function(user) {
            if (user === "you") {
                return;
            }
            modal.find('#boosters-list').append('<a href="/'+user+'" class="list-group-item">@'+user+'<span class="badge badge-secondary float-right">Following</span></li>')
        })
        users.otherBoosters.forEach(function(user) {
            modal.find('#boosters-list').append('<a href="/'+user+'" class="list-group-item">@'+user+'</li>')
        })
    })

  // $('body').on('click', '.fullBoostList', function(e) {
  //   var thisList = $(this);
  //   thisList.removeClass('fullBoostList');
  //   thisList.addClass('fullBoostListClicked');
  //   function removeBoostListPopUp(e){
  //     thisList.removeClass('fullBoostListClicked');
  //     thisList.addClass('fullBoostList');
  //     $('body').off('click', removeBoostListPopUp);
  //   }
  //   $('body').on('click', removeBoostListPopUp);
  // })
  $('body').on('click', '.content-warning-show-more', function() {
    var state = $(this).attr("data-state");
    var abbrContent = $(this).closest(".post").find(".abbreviated-content");
    console.log(abbrContent)
    if (state == "contracted") {
      var h = abbrContent.css('height','100%').height();
      abbrContent.css('height','0');
      abbrContent.animate({height:h},200);
      $(this).closest(".post").find(".content-warning-images").toggleClass("content-warning-images-shown");
      $(this).attr("data-state","expanded");
    }
    else {
      abbrContent.animate({height:"0"},200);
      $(this).closest(".post").find(".content-warning-images").toggleClass("content-warning-images-shown");
      $(this).attr("data-state","contracted");
    }
    var text = $(this).text();
    $(this).text(
        text == "Show post" ? "Hide post" : "Show post");
  })
  $('body').on('click', '.reply-to-comment', function() {
    // First, check if the reply form is already open - if it is, just scroll to it
    var commentContainer = $(this).closest('.comment');
    var postID = commentContainer.closest('.post').attr("data-post-id");
    var commentID = commentContainer.attr("data-comment-id");
    var checkFormExists = commentContainer.find('.new-comment-form[data-comment-id="'+commentID+'"]');
    if (checkFormExists.length) {
        if (checkFormExists[0].getBoundingClientRect().bottom > $(window).height()-50){
            $("html, body").animate({ scrollTop: checkFormExists.offset().top-200 }, 200);
        }
        console.log("Form already exists!")
        return;
    }
    // pasteHtmlAtCaret($(this).closest(".replyContainer").children("#commentForm").find('.editable-comment-content.medium-editor-element'), "@" + $(this).attr("data-username")+"&nbsp;");

    // Create new comment form with Handlebars.js
    var source = document.getElementById("new-comment-form-template").innerHTML;
    var template = Handlebars.compile(source);
    var html = template({post_id: postID, comment_id: commentID, comment_type: 'child'});
    $(html).appendTo(commentContainer);
    editor.addElements('.editable-text');
    tribute.attach($(".editable-comment-content"));
    //Scroll to newly created form
    newForm = commentContainer.find('.new-comment-form');
    if (newForm[0].getBoundingClientRect().bottom > $(window).height()-50){
        $("html, body").animate({ scrollTop: newForm.offset().top-200 }, 200);
    }
  })
  $('body').on('click', '.delete-post', function() {
    var element = $(this);
    bootbox.confirm("Are you sure you want to delete this post?", function(result){
      if (result == true) {
        let divToDelete = element.closest(".post");
        $.post("/deletepost/"+element.attr("id"), function(data) {
          divToDelete.fadeOut(function() {
            divToDelete.remove();
          });
        });
      }
    });
  })
  $('body').on('click', '.delete-comment', function() {
    let element = $(this);
    let counterToChange = element.closest(".post").find(".show-comments").find('.comments-number');
    var postID = element.closest('.post').attr('data-post-id')
    bootbox.confirm("Are you sure you want to delete this comment?", function(result){
      if (result == true) {
        let divToDelete = element.closest(".comment");
        $.post("/deletecomment/"+postID+"/"+element.attr("data-comment-id"), function(data) {
            divToDelete.find('.content:first').addClass('comment-deleted-content').html('<p class="comment-deleted-message">Comment deleted</p>');
            divToDelete.find('header:first').remove();
            divToDelete.find('footer button.delete-comment:first').remove();

            let newCommentCount = data.numberOfComments;
            console.log(element)
            console.log(counterToChange)
            if(newCommentCount!=0){
              counterToChange.html(newCommentCount)
            }else{
              counterToChange.html("")
            }
        });
      }
    });
  })
  $('body').on('click', '.create-comment', function() {
    let commentButton = $(this);
    let commentForm = commentButton.closest('.new-comment-form');
    let commentType = commentForm.attr('data-comment-type');
    let postID = commentForm.attr('data-post-id');
    let commentID = commentForm.attr('data-comment-id');
    let textarea = commentForm.find("textarea.comment-textarea");
    let contentEditable = commentForm.find("div.comment-textarea");
    let commentContent = textarea.val();
    let commentDepth = 1;
    if (commentType == "primary") {
        commentsContainer = commentButton.closest('.comments').find('.comments-container');
    }
    else if (commentType == "child") {
        commentsContainer = commentButton.closest('.comments-container').find('.comment[data-comment-id='+commentID+']').find('.replies')[0];
        commentDepth = parseInt(commentForm.closest('.comment').attr('data-comment-depth'))+1;
    }
    let emojiWindow = commentForm.find('.replyEmojiWindow');

    let pc = commentForm.find('#image-preview-holder')[0];

    var sortedurls = []; //will contain urls in preview-window order, instead of the order in which they were recieved from the server
    var imagedescs = [];

    if(pc.uploadsCompleted){
      if(pc.uploadsCompleted != pc.uploadsStarted-pc.uploadsCancelled){
        bootbox.alert("You have image uploads in progress.");
        return;
      }else{
        for(let i=0; i < $(pc).find('.newimagecont').length; i++){
          let imageWindow = $($(pc).find('.newimagecont')[i]); // i feel like there probably exists a cleaner way to do this than $($())?
          sortedurls.push(pc.uploadedImageUrls[imageWindow.attr('urlpos')]);
          imagedescs.push(imageWindow.find('#postImageDescription').val());
        }
      }
    }

    if (commentContent.replace(/<[^>]*>/g, "") != "" || sortedurls.length > 0) { // Filter out empty comments
      commentButton.prop('disabled', true);
      $.post("/createcomment/"+postID+"/"+commentID,
      { commentContent: commentContent,
        imageUrls: JSON.stringify(sortedurls),
        imageDescs: JSON.stringify(imagedescs),
        depth: commentDepth,
      },
      function(data) {
        if (data!='nope'){
          textarea.val("");
          contentEditable.html("");
          $(data.comment).hide().appendTo(commentsContainer).fadeIn();
          let counterToChange = commentButton.closest(".post").find(".show-comments").find('.comments-number')[0];
          if(counterToChange.textContent === ""){
            counterToChange.innerHTML = "1";
          } else {
            let newCommentCount = parseInt(counterToChange.textContent)+1;
            counterToChange.innerHTML = counterToChange.innerHTML.replace((newCommentCount-1), newCommentCount);
          }
          // Reset (or DESTROY) comment form
          if (commentType == "primary") {
              commentButton.prop('disabled', false);
              emojiWindow.hide();
              $(pc).children('.newimagecont').remove(); //removes all image preview windows
          }
          else if (commentType == "child") {
              commentForm.remove();
          }
          pc.uploadsStarted = 0;
          pc.uploadsCompleted = 0;
          pc.uploadsCancelled = 0;
          pc.uploadedImageUrls = [];
          pc.imageUploadRequests = [];
        } else {
          let html = '<article class="comment"><div class="alert alert-danger">There has been a problem posting your comment. Sorry! Please copy the comment text, refresh the page, and try again.</div></article>'
          $(html).hide().appendTo(commentsContainer).fadeIn();
          // commentButton.prop('disabled', false); // Probably don't disable the reply button if an error occurs because god knows what else has happened to the form
        }
      });
    }
  })
  $('body').on('click', '.notificationLink', function(e) {
    e.preventDefault();
    var link = this.href;
    $.post("/api/notification/update/"+$(this).attr("id"), function( data ) {
      window.location.href = link;
    });
  })
  $('body').on('click', '.unsubscribe-post', function(e) {
    var button = $(this);
    bootbox.confirm("You are currently receiving notifications when someone comments on this post. Would you like to mute this post to stop receiving these notifications? You will still be notified if someone mentions you.", function(result){
      if (result == true) {
        $.post("/api/post/unsubscribe/"+button.attr("data-post-id"), function( data ) {
          button.removeClass('unsubscribe-post').addClass('subscribe-post').html('<i class="far fa-bell-slash"></i>').attr("data-original-title", "Not receiving notifications (click to change)");
        })
      }
    })
  })
  $('body').on('click', '.subscribe-post', function(e) {
    var button = $(this);
    bootbox.confirm("You have muted this post. Would you like to unmute it and start receiving notifications when someone comments?", function(result){
      if (result == true) {
        $.post("/api/post/subscribe/"+button.attr("data-post-id"), function( data ) {
          button.removeClass('subscribe-post').addClass('unsubscribe-post').html('<i class="far fa-bell"></i>').attr("data-original-title", "Receiving notifications (click to change)");
        })
      }
    })
  })
});
</script>
