<script id="new-comment-form-template" type="text/x-handlebars-template">
<div class="new-comment-form" data-comment-type="\{{comment_type}}" data-post-id="\{{post_id}}" data-comment-id="\{{comment_id}}">
  <div class="form-row">
    <textarea class="form-control form-control-sm comment-textarea editable-text editable-comment-content" id="commentContent" name="commentContent" style="resize: none;" placeholder="Write a comment." maxlength="9000"></textarea>
  </div>
  <div class="form-row my-2 card p-1 replyEmojiWindow" style="display:none">
      <button type="button" class="add-emoji">🍬</button>
      <button type="button" class="add-emoji">🍭</button>
      <button type="button" class="add-emoji">🍡</button>
      <button type="button" class="add-emoji">🍩</button>
      <button type="button" class="add-emoji">🍪</button>
      <button type="button" class="add-emoji">🍫</button>
      <button type="button" class="add-emoji">🎂</button>
      <button type="button" class="add-emoji">🍯</button>
      <button type="button" class="add-emoji">🍎</button>
      <button type="button" class="add-emoji">🍑</button>
      <button type="button" class="add-emoji">🍌</button>
      <button type="button" class="add-emoji">🍓</button>
      <button type="button" class="add-emoji">🍇</button>
      <button type="button" class="add-emoji">🍉</button>
      <button type="button" class="add-emoji">🐝</button>
      <button type="button" class="add-emoji">😊</button>
      <button type="button" class="add-emoji">🙃</button>
      <button type="button" class="add-emoji">😍</button>
      <button type="button" class="add-emoji">😂</button>
      <button type="button" class="add-emoji">😭</button>
      <button type="button" class="add-emoji">😬</button>
      <button type="button" class="add-emoji">😆</button>
      <button type="button" class="add-emoji">😩</button>
      <button type="button" class="add-emoji">😱</button>
      <button type="button" class="add-emoji">😒</button>
      <button type="button" class="add-emoji">🖖</button>
      <button type="button" class="add-emoji">🙌</button>
      <button type="button" class="add-emoji">👏</button>
      <button type="button" class="add-emoji">👌</button>
      <button type="button" class="add-emoji">💪</button>
      <button type="button" class="add-emoji">🤦</button>
      <button type="button" class="add-emoji">🌱</button>
      <button type="button" class="add-emoji">🌞</button>
      <button type="button" class="add-emoji">🌝</button>
      <button type="button" class="add-emoji">❤️</button>
      <button type="button" class="add-emoji">💕</button>
      <button type="button" class="add-emoji">💖</button>
      <button type="button" class="add-emoji">🔥</button>
      <button type="button" class="add-emoji">🎉</button>
      <button type="button" class="add-emoji">💯</button>
      <button type="button" class="add-emoji">🏳️‍🌈</button>
  </div>
  <div id="image-preview-holder" class="form-row post-controls image-preview-holder">
    <input type="file" class="file-input" accept="image/gif, image/jpeg, image/png" aria-label="Choose image" name="postImage" multiple>
  </div>
  <div id="replyControlsRow" class="form-row mt-2 post-controls">
    <div class="leftSideControls">
      <button type="button" class="btn btn-primary btn-fade" id="postImageButton"><i class="fas fa-image"></i></button><button type="button" class="btn btn-primary btn-fade replyEmojiWindowButton"><i class="far fa-smile"></i></button>
    </div>
    <div class="rightSideControls">
      <button type="submit" class="btn btn-primary btn-fade create-comment">Reply <i class="fas fa-chevron-right"></i></button>
    </div>
  </div>
</div>
</script>

<script type="text/javascript">
function appendToInput(inputElement, appendedText) {
   if(inputElement.selectionStart){ //if the cursor has a position in the box
      var cursorPos = inputElement.selectionStart;
      inputElement.value = inputElement.value.substring(0,cursorPos) + appendedText + inputElement.value.substring(cursorPos);
      inputElement.selectionStart = cursorPos + appendedText.length; //this maintains the cursor position so adding multiple appendedTexts at once will put them in the same place
      inputElement.selectionEnd = cursorPos + appendedText.length;
      inputElement.focus();
   }else if(inputElement.selectionStart===0){ //special case: when the cursor is at position 0, the above condition won't work, we need to handle that better
      inputElement.value = appendedText + inputElement.value;
      inputElement.selectionStart = appendedText.length; //this maintains the cursor position so adding multiple appendedTexts at once will put them in the same place
      inputElement.selectionEnd = appendedText.length;
      inputElement.focus();
   }else{ //if there is no cursor, just add it on the end. this is also the only way this will work on IE8 and below.
      inputElement.value+=appendedText;
      inputElement.focus();
   }
}

// Lightly adapted from http://jsfiddle.net/jwvha/468/
function pasteHtmlAtCaret(element, html, selectPastedContent = false) {
   element.focus();
   var sel, range;
   if (window.getSelection) {
         // IE9 and non-IE
         sel = window.getSelection();
         if (sel.getRangeAt && sel.rangeCount) {
               range = sel.getRangeAt(0);
               range.deleteContents();

               // Range.createContextualFragment() would be useful here but is
               // only relatively recently standardized and is not supported in
               // some browsers (IE9, for one)
               var el = document.createElement("div");
               el.innerHTML = html;
               var frag = document.createDocumentFragment(), node, lastNode;
               while ( (node = el.firstChild) ) {
                     lastNode = frag.appendChild(node);
               }
               var firstNode = frag.firstChild;
               range.insertNode(frag);

               // Preserve the selection
               if (lastNode) {
                     range = range.cloneRange();
                     range.setStartAfter(lastNode);
                     if (selectPastedContent) {
                           range.setStartBefore(firstNode);
                     } else {
                           range.collapse(true);
                     }
                     sel.removeAllRanges();
                     sel.addRange(range);
               }
         }
   } else if ( (sel = document.selection) && sel.type != "Control") {
         // IE < 9
         var originalRange = sel.createRange();
         originalRange.collapse(true);
         sel.createRange().pasteHTML(html);
         var range = sel.createRange();
         range.setEndPoint("StartToStart", originalRange);
         range.select();
   }
   if (element.html()){
      console.log("haz")
      element.next('textarea').val(element.html().trim());
   }
}

$(function() {
    //this is here bc this is the first of our scripts to be linked in in the layout, and this should be the first thing the browser does
    window.onerror = function(errorMessage, source, lineno, colno, error){
        var errorstring = "error: "+errorMessage+"\noriginating from script: "+source+" on line "+lineno+" and column "+colno;
        if(error && error.stack){
            errorstring+="\nfull stack trace: \n" + error.stack;
        }
        if(error && error.message){
            errorstring+="\nerror object message: "+error.message;
        }
        if(errorMessage && errorMessage.message){ //it looks like some browsers just use an error object as the first paramater
            errorstring+="\nother message: "+errorMessage.message;
        }
        if(errorMessage && errorMessage.stack){
            errorstring+="\npossibly second stack trace: \n"+errorMessage.stack;
        }
        if (typeof errorMessage == "object") {
            errorstring += "\nnamespace: "+errorMessage.namespace;
        }
        if(window.navigator && window.navigator.userAgent){
            errorstring+="\nbrowser user agent header: "+window.navigator.userAgent;
        }
        $.post("/admin/reporterror", {errorstring: errorstring});
    }

    // TRIBUTE-RELATED FUNCTIONALITY (@-MENTIONS)
    // Init tribute
    $.post('/api/user/followers', function (data) {
        followers = JSON.parse(data).followers;
        tribute = new Tribute({
            values: followers,
            menuItemTemplate: function (item) {
                return '<img class="tribute-image" src="/images/' + item.original.image + '">' + item.string;
            }
        })
        tribute.attach($(".editable-text")); //attach to new post form and comment fields if there are any that aren't handled when their posts are appended (look a few lines down for that)
    });

    // Attach scripts to newly loaded posts
    $('#postsContainer').on('append.infiniteScroll', function (event, response, path, items) {
        editor.addElements('.editable-text');
        if (typeof tribute !== 'undefined') { // Silently fails to load tribute if API has not yet responded, it will be attached to these comment fields when tribute does load (look up a few lines)
            tribute.attach($(".editable-comment-content"));
        }
        var newlyLoadedStuff = $(items);
        if (newlyLoadedStuff.find('.post-images').length > 0) {
            var imagesLoaded = newlyLoadedStuff.find('.post-single-image').length;
            console.log("images loaded: " + imagesLoaded);
            var imagesLightboxed = 0;

            var $images = newlyLoadedStuff.find('.post-images a');
            var $imagesGrouped = $images.filter('[data-group]');
            var $imagesAlone = $images.not($imagesGrouped);
            var params = {
                // your params
            };

            // Handle standalone images
            $imagesAlone.each(function (index, element) {
                $(element).simpleLightbox(params);
                imagesLightboxed++;
            });

            // Handle grouped images
            if ($imagesGrouped.length > 0) {
                // Select all groups
                var groupNames = $imagesGrouped.map(function () {
                    return $(this).data('group');
                }).get();
                groupNames = $.unique(groupNames);

                // Apply on each group
                $.each(groupNames, function (key, value) {
                    var filteredGroup = $imagesGrouped.filter(function () { //could this be .find instead of .filter so that it just finds the one instance and stops
                        return $(this).data('group') == value;
                    })
                    filteredGroup.simpleLightbox(params);
                    imagesLightboxed += filteredGroup.length;
                });
                console.log("images lightboxed: " + imagesLightboxed)
                if (imagesLightboxed != imagesLoaded) {
                    console.log("not all images lightboxed!!!!!!");
                }
                //$.post("/admin/clientsideerrors",{errortext: "not all images lightboxed: "+imagesLoaded+" loaded, "+imagesLightboxed+" lightboxed"})
            }
        }
    });

    // From https://stackoverflow.com/a/4819886, will undoubtedly break sooner or later
    function is_touch_device() {
        var prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');
        var mq = function (query) {
            return window.matchMedia(query).matches;
        }
        if (('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) {
            return true;
        }

        // include the 'heartz' as a way to have a non matching MQ to help terminate the join
        // https://git.io/vznFH
        var query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');
        return mq(query);
    }

    function createToolbar(mobileDevice) {
        if (mobileDevice) {
            toolbar = {
                buttons: ['bold', 'italic', 'quote', 'unorderedlist', 'anchor'],
                static: true,
            }
        } else {
            toolbar = {
                buttons: ['bold', 'italic', 'quote', 'unorderedlist', 'anchor'],
                static: false,
            }
        }
        return toolbar;
    }
    options = {
        buttonLabels: 'fontawesome',
        imageDragging: false,
        toolbar: createToolbar(is_touch_device()),
        keyboardCommands: {
            commands: [{
                    command: 'bold',
                    key: 'B',
                    meta: true,
                    shift: false,
                    alt: false
                },
                {
                    command: 'italic',
                    key: 'I',
                    meta: true,
                    shift: false,
                    alt: false
                }
            ],
        },
        placeholder: {
            text: 'Write something, highlight text to format.'
        },
        paste: {
            forcePlainText: true,
            cleanPastedHTML: true
        }
    }
    editor = new MediumEditor('.editable-text,#communityDescription,#communityRules', options);
});
</script>
