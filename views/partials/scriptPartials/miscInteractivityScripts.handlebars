<script type="text/javascript">
//bootstrap doesn't officially support multiple modals open at once, so if an alert modal comes up over our editor modal we have to sneakily keep it from resetting
//the body when it's dismissed and make the backdrops not collide with each other
var oldAlert = bootbox.alert;
bootbox.alert = function(alertString, callback) {
    var editModal = $("#editPostModal");
    oldAlert(alertString, callback);
    if (editModal.length) {
        var body = $("body");
        var obvs = new MutationObserver(function(e) {
          if(editModal.length && editModal.is(":visible")){
            body.addClass("modal-open");
          }
          obvs.disconnect();
          obvs = undefined;
        })
        obvs.observe(body[0], {
            attributes: true,
            attributeFilter: ['class']
        })
        $($(".modal-backdrop")[1]).css('z-index', 1050); //so the second modal backdrop will be in front of the edit post modal, which has a z-index of 1040 (in css) but behind the bootbox-alert modal, which is at z-index: 1060
    }
}

function resolveTimestamp(element) {
    element.title = new Date(parseInt(element.getAttribute('data-timestamp'))).toLocaleTimeString(undefined, { weekday: 'long', day: 'numeric', month: 'long', era: 'short', year: 'numeric', timeZoneName: 'short' });
    element.setAttribute("onmouseover", "");
}

function touchResolveTimestamp(element) {
    if (element.lastTouch && event.timeStamp - element.lastTouch < 300) {
        element.innerHTML = new Date(parseInt(element.getAttribute('data-timestamp'))).toLocaleTimeString(undefined, { weekday: 'long', day: 'numeric', month: 'long', era: 'short', year: 'numeric', timeZoneName: 'short' })
        element.setAttribute("ontouchstart", "");
    }
    element.lastTouch = event.timeStamp;
}

//check for posts every minute (function declared globally for console debugging purposes)
{{#eq activePage "home"}}
var pageLoadTime = new Date().getTime();
function checkForNewPosts(){
    $.get("/heyaretherenewposts/"+pageLoadTime).done(function(data,textStatus,jqXHR){
      if(data=="yeah"){
        $("#newPostsAvailable").show();
      }else{
        window.setTimeout(checkForNewPosts, 60000);
      }
    })
  }
  window.setTimeout(checkForNewPosts, 60000);
{{/eq}}

$(function() {

  function isStackableURL(url){
    return (!url.match(/^\/settings$/) && !url.match(/^\/communities$/) && !url.match(/^\/logout$/) && !url.match(/^\/signup$/) && !url.match(/^\/api\/.*$/))

  }

  history.scrollRestoration = 'manual';

  var historyStateId = 0;
  var prePopState = 0;

  history.replaceState({infS:activeScrollPath,scrt:0,hid:historyStateId++,url:window.location.href},'',window.location.href);

$('body').on('click','a',function(e){
  var href = this.getAttribute('href')
  if(href.substring(0,1)=="/" && isStackableURL(href)){
    e.preventDefault();
    needPostsOlderThan = ""+(new Date().getTime());
    if(href==window.location.pathname){
      $(window).scrollTop(0);
      restartInfiniteScroll();
      return;
    }
    var fullDestUrl = this.href;
    var scrt = $(window).scrollTop();
    var postsContainer = $('.postsContainer');
    postsContainer.infiniteScroll('destroy');
    postsContainer.removeClass('postsContainer').addClass('inactivePostsContainer');
    var prevFeedCont = $('.active-feed-container');
    prevFeedCont.nextAll().remove();
    prevFeedCont.removeClass('active-feed-container').addClass('inactive-feed-container');
    $.get({url:fullDestUrl+'/internalized',success:function(data){
      $('.inactive-feed-container').last().after(data);
      var editor = $('.active-feed-container').find("#editor");
      if(editor.length){
        attachQuill(editor[0]);
      }
      startInfiniteScroll();
      history.replaceState({infS:history.state.infS,scrt:scrt,hid:history.state.hid,url:window.location.href},'',window.location.href);      
      history.pushState({infS: activeScrollPath,scrt:0,hid:historyStateId++,url:fullDestUrl},'',fullDestUrl);
      prePopState = historyStateId;
    },error:function(){
      window.location.href = fullDestUrl;
    }})
  }
})

window.addEventListener('popstate',function(e){
  activeScrollPath = e.state.infS;
  var oldActive = $('.active-feed-container');
  var newActive = prePopState < e.state.hid ? oldActive.next() : oldActive.prev();
  if(newActive.length){
    oldActive.removeClass('active-feed-container').addClass('inactive-feed-container');
    newActive.removeClass('inactive-feed-container').addClass('active-feed-container');
    var oldPostCont = oldActive.find('.postsContainer');
    oldPostCont.infiniteScroll('destroy');
    oldPostCont.removeClass('postsContainer').addClass('inactivePostsContainer');
    newActive.find('.inactivePostsContainer').removeClass('inactivePostsContainer').addClass('postsContainer');
    startInfiniteScroll();
    prePopState = e.state.hid;
    $(window).scrollTop(e.state.scrt);
    console.log(e.state.scrt);
  }else{
    window.location.href = e.state.url;
  }
})

    $(window).scroll(function() {
        var scroll = $(window).scrollTop();
        history.replaceState({infS:history.state.infS,scrt:scroll,hid:history.state.hid},'',window.location.href);
        if (scroll > 0) {
            $("#topNav").addClass("shadow");
        }
        else {
            $("#topNav").removeClass("shadow");
        }
    });
{{#if loggedInUserData.settings.flashRecentComments}}
    $(window).scroll(function() {
        $(".recent-comment-content:not(.flash)").each(function(){
            var element = $(this)
            var top_of_element = $(this).offset().top;
            var bottom_of_element = $(this).offset().top + $(this).outerHeight();
            var bottom_of_screen = $(window).scrollTop() + window.innerHeight;
            var top_of_screen = $(window).scrollTop();

            if((bottom_of_screen > top_of_element) && (top_of_screen < bottom_of_element)){
                element.addClass('flash')
            }
        });
    });
{{/if}}

    $('html').on('show.simplelightbox', function () {
	     $('#bodyContainer, #topNav').css('filter','blur(10px)');
    });
    $('html').on('close.simplelightbox', function () {
         $('#bodyContainer, #topNav').css('filter','none');
    });

  // Reload notifications container every minute (hack until we set up WebSockets)
  window.setInterval(function(){
    $("#notificationsContainer").load("/api/notification/display");
  }, 60000);
  $("#notificationsContainer").load( "/api/notification/display" );

  if ($('#notificationsPageLink').hasClass('active')){
    $('#notificationsPageLink').find('.notifications-count').css('color', '#900202');
  }

  $('.clear-all-notifications').click(function() {
      $.post('/api/notifications/clearall', function(data){
          $("#notificationsContainer").load( "/api/notification/display" );
      })
  })

  $('#display-recommendations-help').click(function() {
      $('.recommendations-help-text').slideToggle('fast');
  })

  $('.hide-recommendation').click(function() {
      icon = $(this).closest('.user-list-icon');
      id = $(this).attr('data-target')
      type = $(this).attr('data-type')
      bootbox.confirm("Are you sure you want to hide this recommendation? There isn't currently a way to restore hidden recommendations.", function(result){
          if (result == true) {
              $.post('/api/recommendations/remove/' + type + '/' + id, function(){
                  icon.remove();
              }).fail(function () { console.log("I errored!"); bootbox.alert("Hiding this recommendation failed! Refresh the page and try again."); });
          }
      });
  })

  //not currently used
  $("#darkModeToggle").click(function(e){
    e.preventDefault();
    if ($(this).hasClass('notification-active')){
      $("#darkModeStylesheet").attr("href","")
      $(this).removeClass('notification-active')
    }
    else {
      $("#darkModeStylesheet").attr("href","/css/darkmode.css")
      $(this).addClass('notification-active')
    }
  })

  // Navbar search box

  $('#navbarSearchField').keypress(function(event){
  	var keycode = (event.keyCode ? event.keyCode : event.which);
    var searchQuery = $(this).val();
  	if(keycode == '13'){
  		window.location.href = '/search/' +	searchQuery
  	}
  });
  $("#navbarSearchButton").click(function(event){
    event.preventDefault();
    var searchQuery = $('#navbarSearchField').val();
    window.location.href = '/search/' +	searchQuery
  });

  $('body').on('click', '.show-comments', function() {
    commentsContainer = $(this).closest(".post").find(".comments");
    commentsContainer.slideToggle("fast", function(){
      commentsContainer.find('.comment').each(function(i,e) {
          e = $(e);
          showMoreAndImageLightboxing(e);
      })
      if (commentsContainer.is(':visible')){
        if(commentsContainer.height() > $(window).height()){
          scrollTarget = $(this).closest('.comments').find('.recent-comment-content')
          if (scrollTarget[0]) {
              var scroll = scrollTarget.offset().top+scrollTarget.height()-$(window).height()+200;
          }
          else {
              var scroll = commentsContainer.offset().top+commentsContainer.height()-$(window).height();
          }
          $("html, body").animate({ scrollTop: scroll+"px" },200);
        }
        var post = $(this).closest('.post');
        $.post("/api/notification/update-by-subject/"+post.attr("data-post-id"), function(data){
          $("#notificationsContainer").load( "/api/notification/display" );
        })
      }
    })

  })
  $('body').on('click', '.show-more', function() {
    var state = $(this).attr("data-state");
    if (state == "contracted") {
    var h = $(this).prev(".abbreviated-content").css('height','100%').height();
    $(this).prev(".abbreviated-content").css('height','20rem');
    $(this).prev(".abbreviated-content").removeClass("abbreviated-content").addClass("content").animate({height:h},200,"swing",function(){$(this).css('height','100%')});
    $(this).attr("data-state","expanded");
    }
    else {
      var pC = $(this).prev(".content");
      pC.animate({height:"20rem"},200,"swing",function(){pC.addClass("abbreviated-content").removeClass("content")});
      var scroll = pC.offset().top;
      $("html, body").animate({ scrollTop: (scroll-200)+"px" },200); //-200 to roughly account for the navbar covering up the very top of the screen
      $(this).attr("data-state","contracted");
    }
    var text = $(this).text();
    $(this).text(
        text == "Show more" ? "Show less" : "Show more");
  })

    $('#boostersModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget)
        var users = button.data('users')
        var modal = $(this)
        modal.find('#boosters-list').empty()
        if (users.followedBoosters.includes("you")){
            modal.find('#boosters-list').append('<a href="/{{loggedInUserData.username}}" class="list-group-item">You (@{{loggedInUserData.username}})</li>');
        }
        users.followedBoosters.forEach(function(user) {
            if (user === "you") {
                return;
            }
            modal.find('#boosters-list').append('<a href="/'+user+'" class="list-group-item">@'+user+'<span class="tag">Following</span></li>')
        })
        users.otherBoosters.forEach(function(user) {
            modal.find('#boosters-list').append('<a href="/'+user+'" class="list-group-item">@'+user+'</li>')
        })
    })

  $('body').on('click', '.content-warning-show-more', function() {
    var $this = $(this);
    var images = $this.closest(".post").find(".content-warning-images");
    var state = $this.attr("data-state");
    var abbrContent = $this.closest(".post").find(".abbreviated-content");
    if (state == "contracted") {
      abbrContent.css('height','100%')
      images.toggleClass("content-warning-images-shown");
      var h = abbrContent.height();
      abbrContent.css('height','0');
      abbrContent.animate({height:h},200);
      $this.attr("data-state","expanded");
    } else {
      abbrContent.animate({height:"0"},200,function(){
        images.toggleClass("content-warning-images-shown");
        $this.attr("data-state","contracted");
      })
    }
    var text = $this.text();
    $this.text(
        text == "Show post" ? "Hide post" : "Show post");
  })
  $('body').on('click', '.delete-post', function() {
    var element = $(this);
    bootbox.confirm("Are you sure you want to delete this post?", function(result){
      if (result == true) {
        let divToDelete = element.closest(".post");
        $.post("/deletepost/"+divToDelete.attr("data-post-id"), function(data) {
          divToDelete.fadeOut(function() {
            divToDelete.remove();
          });
        });
      }
    });
  })
  $('body').on('click', '.delete-comment', function() {
    let element = $(this);
    let counterToChange = element.closest(".post").find(".show-comments").find('.comments-number');
    var postID = element.closest('.post').attr('data-post-id')
    bootbox.confirm("Are you sure you want to delete this comment?", function(result){
      if (result == true) {
        let divToDelete = element.closest(".comment");
        $.post("/deletecomment/"+postID+"/"+element.attr("data-comment-id"), function(data) {
            divToDelete.find('.content:first').addClass('comment-deleted-content').html('<p class="comment-deleted-message">Comment deleted</p>');
            divToDelete.find('header:first').remove();
            divToDelete.find('footer button.delete-comment:first').remove();

            let newCommentCount = data.numberOfComments;
            if(newCommentCount!=0){
              counterToChange.html(newCommentCount)
            }else{
              counterToChange.html("")
            }
        });
      }
    });
  })

  $('body').on('click', '.notificationLink', function(e) {
    e.preventDefault();
    var link = this.href;
    $.post("/api/notification/update/"+$(this).attr("id"), function( data ) {
      window.location.href = link;
    });
  })
  $('body').on('click', '.unsubscribe-post', function(e) {
    var button = $(this);
    bootbox.confirm("You are currently <strong>receiving notifications</strong> when someone comments on this post. Would you like to turn <strong>off</strong> notifications for this post? You will still be notified if someone mentions you.", function(result){
      if (result == true) {
        $.post("/api/post/unsubscribe/"+button.attr("data-post-id"), function( data ) {
          button.removeClass('unsubscribe-post').addClass('subscribe-post').html('<i class="far fa-bell-slash"></i>').attr("data-original-title", "Not receiving notifications (click to change)");
        })
      }
    })
  })
  $('body').on('click', '.subscribe-post', function(e) {
    var button = $(this);
    bootbox.confirm("You are currently <strong>not receiving notifications</strong> when someone comments on this post. Would you like to turn <strong>on</strong> notifications for this post?", function(result){
      if (result == true) {
        $.post("/api/post/subscribe/"+button.attr("data-post-id"), function( data ) {
          button.removeClass('subscribe-post').addClass('unsubscribe-post').html('<i class="far fa-bell"></i>').attr("data-original-title", "Receiving notifications (click to change)");
        })
      }
    })
  })
  $('body').on('click','.embedded-video-preview', function(e){
    e.preventDefault()
    var embedurl = $(this).attr('embedurl');
    $(this).replaceWith('<div class="embedded-video-cont"><iframe class="embedded-video" src="'+embedurl+'" frameborder="0" allowfullscreen></iframe></div>')
  })
});
</script>
