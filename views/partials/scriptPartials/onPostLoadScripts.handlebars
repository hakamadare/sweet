<script type="text/javascript">


function startInfiniteScroll() {
    $('.postsContainer').infiniteScroll({
      //infinite scroll loading is timestamp based; we want to load posts just older than the oldest post yet loaded, or we use the current time as a placeholder value
        //if we've just gotten to this page, or if we've just made a post the feed is emptied and needPostsOlderThan is set so that the new post loads on top of the feed
        path: function() {
            if ($(".oldesttimestamp").length) {
                //if there are posts on the page, the server has provided the timestamp of the oldest post yet loaded in a hidden element that we will find here
                return activeScrollPath + $(".oldesttimestamp").last().html();
            }
            //this is for when the feed is currently empty and is being loaded/reloaded
            return activeScrollPath + needPostsOlderThan;
        },
        append: '.post',
        prefill: true,
        history: false,
        status: '.page-load-status'
    });
}

function restartInfiniteScroll(timestamp) {
    if (!timestamp) {
        timestamp = new Date().getTime();
    }
    $(".infinite-scroll-last, .infinite-scroll-error").css('display', 'none');
    $(".infinite-scroll-request").css('display', 'block');
    var postsContainer = $('.postsContainer');
    postsContainer.fadeOut(250, function() {
        postsContainer.html("");
        postsContainer.css('display','');
        needPostsOlderThan = timestamp;
        pageLoadTime = timestamp;
        postsContainer.infiniteScroll("destroy");
        startInfiniteScroll();
        $(".page-load-status").css('display', 'block');
    });
}


//this is used to keep track of the oldest post currently loaded in the feed; when the infinite scroll script fetches the next page of posts,
//it should start with posts just older than that. it starts out with the current time as a placeholder (obvs we only want posts older than the current time, we only have posts older than the current time)
needPostsOlderThan = new Date().getTime();

// Globally defining the check height function (should this go somewhere ... else?)
function showMoreAndImageLightboxing(e) {
    var contentCont = $(e.find('.content')[0]);
    if (contentCont.height() > 550 && !contentCont.hasClass('content-warning-post')) {
        var content = contentCont.children();
        content.remove();
        contentCont.append('<div class="abbreviated-content"></div><button type="button" class="button grey-button uppercase-button show-more" data-state="contracted">Show more</button>');
        contentCont.children('.abbreviated-content').append(content);
    }
    var images = contentCont.find('.post-images a');
    if(images.length){
        images.simpleLightbox();
    }
}
$(function(){
{{#if loggedIn}}

    // TRIBUTE-RELATED FUNCTIONALITY (@-MENTIONS)
    // Init tribute
    $.post('/api/user/followers', function (data) {
        followers = JSON.parse(data).followers;
        tribute = new Tribute({
            values: followers,
            menuItemTemplate: function (item) {
                return '<img class="tribute-image" src="/images/' + item.original.image + '"><span class="tribute-text">' + item.string + '</span>';
            },
            searchOpts: {
                pre: '<strong>',
                post: '</strong>'
            }
        })
        tribute.attach($(".ql-editor")); //attach to new post form and comment fields if there are any that aren't handled when their posts are appended (look a few lines down for that)
    });

{{/if}}

    // Attach scripts to newly loaded posts
    $('.postsContainer').on('append.infiniteScroll', function (event, response, path, items) {
        var newlyLoadedStuff = $(items);

        newlyLoadedStuff.each(function(i,e){
            e = $(e);
            var imgs = e.children('.content').find('img');
            if(imgs.length){
                var loaded = 0;
                imgs.on('load', function(){
                    loaded++;
                    if(loaded == imgs.length){
                        showMoreAndImageLightboxing(e);
                    }
                })
                imgs.on('error', function(){
                    loaded++;
                    if(loaded == imgs.length){
                        showMoreAndImageLightboxing(e);
                    }
                })
            }else{
                showMoreAndImageLightboxing(e);
            }
        })

        if(newlyLoadedStuff.find('img.link-preview-image').length > 0){
            newlyLoadedStuff.find('img.link-preview-image').on('error',function(){
                $(this).replaceWith('<div class="link-preview-image"><i class="fas fa-link"></i></div>');
            })
        }

        {{#if loggedIn}}
        var commentForms = newlyLoadedStuff.find('.editable-text');
        commentForms.each(function(){
            attachQuill(this,'Reply to this post with a good reply');
        })
        if (typeof tribute !== 'undefined') { // Silently fails to load tribute if API has not yet responded, it will be attached to these comment fields when tribute does load (look up a few lines)
            tribute.attach(newlyLoadedStuff.find(".ql-editor"));
        }
        {{/if}}
    });
});
</script>
